<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Въведение - Научи Haskell за по-добър живот!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="{{request.url_root}}">
 
<link rel="shortcut icon" href="static/favicon.png" type="image/png">
        <link rel="next" href="starting-out">
<link type="text/css" rel="stylesheet" href="static/reset.css">
<link type="text/css" rel="stylesheet" href="static/style.css">
<link type="text/css" rel="stylesheet" href="static/sh/Styles/SyntaxHighlighter.css">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Съдържание</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="starting-out" class="nxtlink">Първи Стъпки</a>
                                            </li>
                </ul>
            </div>
        <h1>Въведение</h1> 
<a name="about-this-tutorial"></a>
<h2>За тази серия от уроци</h2>
<p>
Добре дошли в <em>Learn You a Haskell for Great Good</em>! 
Ако четете това, най-вероятно искате да научите Haskell. Дошли сте на правилното място. Но първо, нека поговорим за тази поредица от уроци.
</p>
<p>
Реших да напиша тези уроци, защото исках да кристализирам собствените си знания за Haskell и защото видях, че мога да помогна на хора, които започват да учат Haskell, да се запознаят с него от моята гледна точка. Има доста уроци за Haskell въртящи се из мрежата. Когато аз започвах да го уча, не използвах само един източник на информация. Наичнът, по който го научих, беше като четях от различни уроци и статии, защото всяки един от тях обясняваше нещо по различен начин от спрямо другите. Използвайки различни ресурси, успях да подредя пъзела и в крайна сметка нещата се подредиха в главата ми. Тази поредица е просто опит да добавя още един ресурс, полезен при ученето на Haskell, увеличивайки вероятността да намериш нещо по вкуса ти.
</p>
<img src="http://s3.amazonaws.com/lyah/bird.png" alt="bird" class="left" width="230" height="192">
<p>
Тази поредица от уроци е предназначена за хора, които вече има познания в императивни езици за програмиране (C,C++, Java, Python &hellip;), но не са програмирали на функционален език преди (Haskell, ML, OCaml &hellip;). Въпреки това, съм убеден, че дори и да нямаш някакъв особено голям опит с какъвто и да е програмен език, умен човек, като теб, ще може да следи уроците и да научи Haskell :).
</p>
<p>
Каналът #haskell във freenode мрежата e чудесно място за въпроси, ако изпитвате трудности. Хората там са много дружелюбни, търпеливи и подхождат с разбиране към тези с по-малко опит.
</p>
<p>
Аз се провалих около два пъти преди да успея да увладея Haskell, защото просто всичко ми се струваше твърде странно и не успях да го разбера. Но в даден момент всичко просто се намества и след този начален мъглив период, всичко по-нататъка беше доста по-лесно за усвояване. Накратко, просто се опитвам да кажа че, Haskel е страхотен и ако си заинтересуван в програмирането наистина трябва да го научиш, дори и да ти се струва странно в началото. Да научиш Haskell е като да се научиш да програмираш за първи път - супер забавно е. Кара те да мислиш по различен начиш, което ни води до следващата секция &hellip;
</p>

<a name="so-whats-haskell"></a><h2>Какво точно е Haskell?</h2>
<p>
<img src="http://s3.amazonaws.com/lyah/fx.png" alt="fx" class="right" width="150" height="146">
Haskell e <em>Чист функционален език</em>(purely functional programming language).
В императивните езици, за да свършиш нещо, обикновено даваш на компютъра поредица от задачи, които той след това изпълнява. Докато програмата се изпълнява, тя може да промени състоянието си. Например, може да дадем стойност 5 на променливата <span class="fixed">a</span>, след това да направим нещо, и след това да дадем друга стойност на същата променлива. На разположение са структури, с които можем да контролираме изпълнението на програмата. В чистите функционални езици, не казваме на компютъра какви <i>неща</i> да прави, а по-скоро му обясняваме какво представляват <i>нещата</i>. Например, можем да видим какъв е факториелът на дадено число, ако умножим всички число от 1 до даденото число, сумата на лист от числа е сборът на първото число от листа плюс сумата от останалите числа в листа, и т.н. Примерите от последното изречение могат да се изразят във формата на функции. Също така, не може да дадеш на променлива някаква стойност и след това да й дадеш друга стойност. Ако кажеш, че <span class="fixed">a</span> е 5, защо по-късно би твърдял, че не е 5, а нещо друго. Идеята, е че във функционалните езици, функцийте нямат странични ефекти. Единственото нещо, което функцията може да направи е да пресметне нещо и да върне резултата. Първоначално това може да изглежда доста ограничаващо, но всъщност има някои доста полезни последствия: ако извикаме функция два пъти с едни и същи параметри, е гарантирано, че ще върне една и съща стойност. Това се нарича референта прозрачност(referential transparency) и не само че позволява на комютъра да си прави изводи относно поведението на програмата, но и прави лесно да видим (а и дори да докажем), че дадена функция е правилна и след това да напишем по-сложни функций, използвайки няколко от по-простите.
</p>
Haskell е <em>мързелив</em>(lazy). Това означава, че освен ако изрично не му се каже, Haskell, няма да изпълни функции или извърши пресмятания, докато наистина не го притиснем да ни покаже резултата. Това допълва чудесно референтната прозрачност и позволява да мислим за програмите като на серия от <em>преобразования върху информация</em>. Позволява и други готини неща например безкрайни структури от данни. Да кажем, че имаме лист (immutable) от числа <span class="fixed">xs = [1,2,3,4,5,6,7,8]</span> и функция <span class="fixed">doubleMe</span> която умножава всеки елемент от листа по две и след това връща нов лист. Ако искахме да умножим нашия лист с 8, използвайки императивен език, и напишем <span class="fixed">doubleMe(doubleMe(doubleMe(xs)))</span>, програмата най-вероятно ще обиколи листа веднъж, ще му направи копие и ще го върне. След това ще обиколи по този начин още два пъти и накрая ще върне резултата. В <strong>lazy</strong> език, извикването на <span class="fixed">doubleMe</span> върху лист, без да изискваме резултата да ни се покаже, ще доведе до това, че езика ще си каже "да, добре, ще сметна това по-късно". Но когато кажем, че искаме да видим резултата, първият (най-външен) <span class="fixed">doubleMe</span> казва на втория, че иска резултата - сега! Втората doubleMe функция казва същото на третата(най-вътрешната) и тя връща удвоено 1, което е 2. Втората функция получава това и връща 4 на първата функция. Първата функция вижда това и казва, че първият елемент е 8. Това означава, че минаваме през листа само веднъж и то само тогава, когато наистина трябва. Това означава, че когато искаш нещо от lazy език, може просто да му дадеш първоначалната информация и след това ефикасно да я обработиш, за да може в крайна сметка да наподобява това, което ти трябва
<p>
<img src="http://s3.amazonaws.com/lyah/lazy.png" class="right" alt="lazy" width="240" height="209">
</p>
<p>
<img src="http://s3.amazonaws.com/lyah/boat.png" class="right" alt="boat" width="160" height="153">
Haskell is <em>statically typed</em>. When you compile your program, the compiler knows which piece of code is a number, which is a string and so on. That means that a lot of possible errors are caught at compile time. If you try to add together a number and a string, the compiler will whine at you. Haskell uses a very good type system that has <em>type inference</em>. That means that you don't have to explicitly label every piece of code with a type because the type system can intelligently figure out a lot about it. If you say <span class="fixed">a = 5 + 4</span>, you don't have to tell Haskell that <span class="fixed">a</span> is a number, it can figure that out by itself. Type inference also allows your code to be more general. If a function you make takes two parameters and adds them together and you don't explicitly state their type, the function will work on any two parameters that act like numbers.
</p>
<p>
Haskell is <em>elegant and concise</em>. Because it uses a lot of high level concepts, Haskell programs are usually shorter than their imperative equivalents. And shorter programs are easier to maintain than longer ones and have less bugs.
</p>
<p>
    Haskell was made by some <em>really smart guys</em> (with PhDs). Work on Haskell began in 1987 when a committee of researchers got together to design a kick-ass language. In 2003 the Haskell Report was published, which defines a stable version of the language.
</p>
<a name="what-you-need"></a><h2>What you need to dive in</h2>
<p>
A text editor and a Haskell compiler. You probably already have your favorite text editor installed so we won't waste time on that. For the purposes of this tutorial we'll be using GHC, the most widely used Haskell compiler. The best way to get started is to download the <a href="http://hackage.haskell.org/platform/">Haskell Platform</a>, which is basically Haskell with batteries included.
</p>
<p>
GHC can take a Haskell script (they usually have a .hs extension) and compile it but it also has an interactive mode which allows you to interactively interact with scripts. Interactively. You can call functions from scripts that you load and the results are displayed immediately. For learning it's a lot easier and faster than compiling every time you make a change and then running the program from the prompt. The interactive mode is invoked by typing in <span class="fixed">ghci</span> at your prompt. If you have defined some functions in a file called, say, <span class="fixed">myfunctions.hs</span>, you load up those functions by typing in <span class="fixed">:l myfunctions</span> and then you can play with them, provided <span class="fixed">myfunctions.hs</span> is in the same folder from which <span class="fixed">ghci</span> was invoked. If you change the .hs script, just run <span class="fixed">:l myfunctions</span> again or do <span class="fixed">:r</span>, which is equivalent because it reloads the current script. The usual workflow for me when playing around in stuff is defining some functions in a .hs file, loading it up and messing around with them and then changing the .hs file, loading it up again and so on. This is also what we'll be doing here.
</p>
                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="starting-out" class="nxtlink">Starting Out</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="static/sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="static/shBrushHaskell.js"></script>
    <script type="text/javascript" src="static/shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = 'static/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
